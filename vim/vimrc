let mapleader = "\<Space>"

augroup vimrc
  au!
augroup END

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set nowrap
set nu
set relativenumber
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'
set t_Co=256
set autoread
set ruler
set cursorline
set noerrorbells vb t_vb=
set showcmd
set backspace=indent,eol,start
set splitbelow
set splitright
set hidden
set incsearch
set timeoutlen=2000
set lazyredraw
set undofile undodir=~/.vim/undo
set noswapfile
set nostartofline
set foldmethod=indent
set foldlevelstart=20
set foldopen-=block
if $TMUX==''
  set clipboard=unnamed
endif
if has("gui_macvim")
  set transparency=10
  set blurradius=10
  set guioptions=
  set guifont=DejaVu\ Sans\ Mono:h10
endif

filetype plugin indent on
filetype plugin on

call plug#begin()
Plug 'ignacysokolowski/python-syntax'
Plug 'ignacysokolowski/twilight256.vim'
Plug 'ervandew/supertab'
Plug 'vim-airline/vim-airline'
Plug 'wellle/targets.vim'
Plug 'airblade/vim-gitgutter'
Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
Plug 'jszakmeister/vim-togglecursor'  " change cursor shape when entering insert mode
Plug 'endel/vim-github-colorscheme'
Plug 'xolox/vim-misc'
Plug 'michaeljsmith/vim-indent-object'
Plug 'thanthese/Tortoise-Typing'
Plug 'Valloric/YouCompleteMe'
Plug 'bkad/CamelCaseMotion'

Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
nmap <leader>A :Ack! 
map <leader>F :execute ":Ack! " . expand("<cword>")<CR>

Plug 'fisadev/vim-isort'
let g:vim_isort_map = '<C-i>'

Plug 'xolox/vim-session'
let g:session_autosave = 'yes'
let g:session_autoload = 'no'
nnoremap <leader>s :OpenSession<CR>
nnoremap <leader>S :OpenSession 

Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=234 guibg=#1C1C1C
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234 guibg=#1C1C1C

Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 300
map y <Plug>(highlightedyank)

Plug 'majutsushi/tagbar', {'on': 'Tagbar'}
let g:tagbar_autofocus = 1
map <leader>\ :Tagbar<CR>

Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_extensions = ['tag', 'buffertag']
if has('python') ||  has('python3')
  " Faster and more accurate fuzzy-matching
  Plug 'felikz/ctrlp-py-matcher'
  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_prompt_mappings = { 'PrtClearCache()': ['<c-r>'] }
nmap <leader>m :CtrlPMRUFiles<CR>
nmap <leader>c :CtrlPTag<CR>
nmap <leader>l :CtrlPBufTag<CR>

Plug 'davidhalter/jedi-vim', {'for': 'python'}
let g:jedi#smart_auto_mappings = 0
let g:jedi#usages_command = '<leader>u'

Plug 'scrooloose/nerdtree'
let NERDTreeIgnore=['__pycache__', '\~$']
nnoremap gf :NERDTreeFind<CR>

Plug 'w0rp/ale', {'for': 'python'}
let g:ale_linters = {}
let g:ale_linters.python = ['flake8', 'mypy', 'isort']
let g:ale_python_flake8_executable = '/bin/sh -c "cd $(dirname %) && flake8"'
let g:ale_python_flake8_args = "--ignore=E501,I201"
nmap <silent> [s <Plug>(ale_previous_wrap)
nmap <silent> ]s <Plug>(ale_next_wrap)
nmap <leader>; :lopen<CR>

Plug 'benmills/vimux'
let g:VimuxRunnerType = "window"
noremap <leader>T :VimuxRunCommand("test_ " . bufname("%"))<CR>
noremap <leader>t :VimuxRunLastCommand<CR>

Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_key = '<C-n>'
let g:multi_cursor_next_key = '<C-n>'
let g:multi_cursor_prev_key = '<C-p>'
let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<Esc>'

call plug#end()

colorscheme twilight256

call camelcasemotion#CreateMotionMappings('<leader>')
let g:python_highlight_all = 1

nmap <leader>, :e ~/.vimrc<CR>
noremap <silent> <leader>V :source ~/.vimrc<cr>
noremap P P`[
nnoremap gb :bn<CR>
nnoremap gB :bp<CR>
map <leader>a ggVG
nnoremap S i<CR><Esc>
map <c-h> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
nmap <leader>C :silent "!ctags -R ."<CR>
nnoremap <leader>R "zyiw:bufdo %s/<C-r>z/<C-r>z/ge \| update<C-f>5b

inoremap jj <Esc>

vmap S :s/\((\\|{\\|\[\)/\0\r/g <bar> s/\()\\|}\\|]\)/,\r\0/g <bar> .-1s/, /,\r/ge<CR>

cnoremap <C-j> <Down>
cnoremap <C-k> <Up>

:command! Co w | %bd | e#

syntax on

hi ColorColumn ctermbg=233 guibg=#1C1C1C
hi cursorline ctermfg=none ctermbg=234 cterm=none guibg=#222222
hi LineNr ctermfg=8 ctermbg=none cterm=none guifg=#555555
hi VertSplit ctermfg=235 guifg=#333333
hi Visual ctermfg=8 ctermbg=0 guifg=#000000 guibg=#555555 gui=none
hi HighlightedyankRegion guifg=#000000 guibg=#555555 cterm=reverse gui=none
hi NonText ctermfg=8 guifg=#555555
hi Pmenu ctermfg=253 ctermbg=238 guibg=#333333 guifg=#DDDDDD
hi PmenuSel ctermfg=235 ctermbg=249 guibg=#CCCCCC guifg=#333333
hi Directory guifg=#7587A6 ctermfg=blue
hi NERDTreeExecFile guifg=#CF6A4C ctermfg=red
hi TagBarScope guifg=#7587A6 ctermfg=blue
hi Folded ctermbg=236 ctermfg=247 guibg=#292929 guifg=#999999
